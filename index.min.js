import{initLoad}from"./modules/initLoad.min.js";import{getPeriodTimes,setupTimes}from"./modules/timeSetup.min.js";import{getEvents,setupEvents}from"./modules/eventSetup.min.js";import{CLOCK_TIME_REGEX,clockTimeToTimestamp}from"./modules/timeConversion.min.js";if(navigator.serviceWorker){window.addEventListener("load",async function(){try{const SW_REGISTRATION=await navigator.serviceWorker.register("./serviceWorker.min.js");if(SW_REGISTRATION.installing){console.debug("Installing service worker..")}else if(SW_REGISTRATION.waiting){console.debug("Service worker has been installed!")}else if(SW_REGISTRATION.active){console.debug("Service worker is active!")}}catch(err){console.error(`Registration failed with ${err}`)}})}initLoad();let periods=await getPeriodTimes("Cabot-High");let studentCalendarEvents=await getEvents("Cabot-High","studentCalendar");let extraEvents=await getEvents("Cabot-High","extra");let customCheckout=NaN;let eventCount=Number.parseInt(localStorage.getItem("event-display-count"));async function updateTimes(){const date=new Date;const morningDate=new Date(periods[0].time);if(date.getDate()>morningDate.getDate()){periods=await getPeriodTimes("Cabot-High");studentCalendarEvents=await getEvents("Cabot-High","studentCalendar");extraEvents=await getEvents("Cabot-High","extra");resetCheckoutTime()}setupTimes(periods,customCheckout);setupEvents(studentCalendarEvents,"studentCalendar",eventCount);setupEvents(extraEvents,"extra",eventCount);const currentTime=new Date;currentTime.setMilliseconds(0)}await updateTimes();setInterval(updateTimes,500,periods);function setCheckoutTime(){const INPUT_BOX=document.getElementById("early-checkout-input");if(CLOCK_TIME_REGEX.test(INPUT_BOX.value)){customCheckout=clockTimeToTimestamp(INPUT_BOX.value)}else{INPUT_BOX.value="Incorrect format"}}function resetCheckoutTime(){document.getElementById("early-checkout-input").value="";customCheckout=NaN}async function setEventCount(){const EVENT_COUNT_INPUT=document.getElementById("event-display-count");let newEventCount=Number.parseInt(EVENT_COUNT_INPUT.value);if(newEventCount<EVENT_COUNT_INPUT.min){EVENT_COUNT_INPUT.value=EVENT_COUNT_INPUT.min;newEventCount=parseInt(EVENT_COUNT_INPUT.min)}else if(newEventCount>EVENT_COUNT_INPUT.max){EVENT_COUNT_INPUT.value=EVENT_COUNT_INPUT.max;newEventCount=parseInt(EVENT_COUNT_INPUT.max)}else if(isNaN(newEventCount)){EVENT_COUNT_INPUT.value=Math.floor(parseInt(EVENT_COUNT_INPUT.max)-parseInt(EVENT_COUNT_INPUT.min));newEventCount=Math.floor(parseInt(EVENT_COUNT_INPUT.max)-parseInt(EVENT_COUNT_INPUT.min))}localStorage.setItem("event-display-count",newEventCount);eventCount=newEventCount;await updateTimes()}window.setCheckoutTime=setCheckoutTime;window.resetCheckoutTime=resetCheckoutTime;window.setEventCount=setEventCount;